import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as s,e as t,f as p,r as l}from"./app.d8db8b54.js";const i={},u=n("h1",{id:"刷题小记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#刷题小记","aria-hidden":"true"},"#"),s(" 刷题小记")],-1),r={id:"_206-反转链表",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_206-反转链表","aria-hidden":"true"},"#",-1),d={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},v=p(`<ul><li><p>迭代法（迭代需要三个指针，pre，cur，nxt，分别按顺序指向三个节点）</p><ul><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
          pre<span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> head
          <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
              nxt <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
              cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre
              pre <span class="token operator">=</span> cur
              cur <span class="token operator">=</span> nxt
          <span class="token keyword">return</span> pre
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>递归法</p><ul><li><p>头递归</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
          <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">if</span> <span class="token keyword">not</span> cur<span class="token punctuation">:</span>
                  <span class="token keyword">return</span> pre
              tmp <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
              cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre
              <span class="token keyword">return</span> helper<span class="token punctuation">(</span>cur<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span>
          <span class="token keyword">return</span> helper<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>尾递归</strong></p></li><li><blockquote><p>递归求解本题理解上有一定的难度，主要需要搞清楚定义的递归函数F(n)的意义。</p><ul><li>无序列表本题中F(n)定义为：反转头为n的链表，并返回新的表头，也就是原链表的最后一个节点；</li><li>无序列表那么F(n.next)的含义为：反转头为n.next的链表，并返回新的表头</li></ul><p><u>接下来要想清楚已知F(n.next)的条件下，如何得到F(n)。</u></p><p><u>注意F(n）和F(n.next）的表头是一致的，所以直接返回就好。关键问题是将n.next指向n，即进行以下操作：</u></p><p>n.next.next = n</p><p>n.next = None</p></blockquote></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
          <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
              <span class="token keyword">return</span> head
          new_head <span class="token operator">=</span> self<span class="token punctuation">.</span>reverseList<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
          head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
          head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
          <span class="token keyword">return</span> new_head
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,1),m={id:"_3-无重复字符的最长子串",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_3-无重复字符的最长子串","aria-hidden":"true"},"#",-1),h={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},f=p(`<ul><li><p>滑动窗口（未掌握）</p><ul><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
          res <span class="token operator">=</span> left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token number">0</span>
          tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">if</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>
                  tmp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                  left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>
              <span class="token keyword">else</span><span class="token punctuation">:</span>
                  tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
                  right <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span>
                  res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> res
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  <span class="token comment">## 相对优化</span>
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
          res <span class="token operator">=</span> <span class="token number">0</span>
          tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>
              <span class="token keyword">if</span> i <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>
                  tmp <span class="token operator">=</span> tmp<span class="token punctuation">[</span>tmp<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
              tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
              res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> res
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,1),y={id:"_146-lru-缓存-需要多次练习",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_146-lru-缓存-需要多次练习","aria-hidden":"true"},"#",-1),w={href:"https://leetcode.cn/problems/lru-cache/",target:"_blank",rel:"noopener noreferrer"},g=p(`<ul><li><p>做题时先给面试官讲一遍LRU和LinkedHashMap的八股，再自己使用双向链表实现就好，考虑自己写输入输出--自己创建链表+hashmap解决</p><ul><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  <span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
          self<span class="token punctuation">.</span>key <span class="token operator">=</span> key
         	self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
         	self<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token boolean">None</span>
          self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
  <span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>
          self<span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity
          self<span class="token punctuation">.</span>hashmap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
          self<span class="token punctuation">.</span>head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>
          self<span class="token punctuation">.</span>tail <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>
          self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>tail
          self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>head
      <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
          <span class="token keyword">if</span> key <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>hashmap<span class="token punctuation">:</span>
              <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
          node <span class="token operator">=</span> self<span class="token punctuation">.</span>hashmap<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
          self<span class="token punctuation">.</span>move_node_last<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
          <span class="token keyword">return</span> node<span class="token punctuation">.</span>val
      <span class="token keyword">def</span> <span class="token function">move_node_last</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
          self<span class="token punctuation">.</span>remove_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
          self<span class="token punctuation">.</span>add_node_last<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      <span class="token keyword">def</span> <span class="token function">remove_node</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
          node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span>
          node<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev
      <span class="token keyword">def</span> <span class="token function">add_node_last</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
          self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node
          node<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev
          node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>tail
          self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> node
      <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
          <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>hashmap<span class="token punctuation">:</span>
              node <span class="token operator">=</span> self<span class="token punctuation">.</span>hashmap<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
              node<span class="token punctuation">.</span>val <span class="token operator">=</span> value
              self<span class="token punctuation">.</span>move_node_last<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
              <span class="token keyword">return</span> 
          <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>hashmap<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">:</span>
              <span class="token keyword">del</span> self<span class="token punctuation">.</span>hashmap<span class="token punctuation">[</span>self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>key<span class="token punctuation">]</span>
              self<span class="token punctuation">.</span>remove_node<span class="token punctuation">(</span>self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
          node <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
          self<span class="token punctuation">.</span>hashmap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node
          self<span class="token punctuation">.</span>add_node_last<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
              
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,1),x={id:"_215-数组中的第k个最大元素",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#_215-数组中的第k个最大元素","aria-hidden":"true"},"#",-1),q={href:"https://leetcode.cn/problems/kth-largest-element-in-an-array/",target:"_blank",rel:"noopener noreferrer"},N=n("ul",null,[n("li",null,"堆排序（未掌握）"),n("li",null,"快速排序")],-1),S={id:"_15-三数之和",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#_15-三数之和","aria-hidden":"true"},"#",-1),A={href:"https://leetcode.cn/problems/3sum/",target:"_blank",rel:"noopener noreferrer"},F=p(`<ul><li><p>排序加双指针（注意去除重复）--考虑所有情况即可</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
          n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
          nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
          res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                  <span class="token keyword">return</span> res
              <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                  <span class="token keyword">continue</span>
              temp <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
              left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
              right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>
              <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
                  <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> temp<span class="token punctuation">:</span>
                      res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                      <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                      	left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>
                      <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                      	right <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span>
                      left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>
                      right <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span>
                  <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">:</span>
                      left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>
                  <span class="token keyword">else</span><span class="token punctuation">:</span>
                      right <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span>
          <span class="token keyword">return</span> res
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),T={id:"_912-排序数组",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#_912-排序数组","aria-hidden":"true"},"#",-1),B={href:"https://leetcode.cn/problems/sort-an-array/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://crush598.github.io/Hush-notes/pages/061c78/",target:"_blank",rel:"noopener noreferrer"},V={id:"_53-最大子数组和",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#_53-最大子数组和","aria-hidden":"true"},"#",-1),D={href:"https://leetcode.cn/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"},I=p(`<ul><li><p>思路一：动态规划</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
          res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
          tmp_sum <span class="token operator">=</span> <span class="token number">0</span>
          <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
              tmp_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>tmp_sum<span class="token operator">+</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span>
              res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>tmp_sum<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
          <span class="token keyword">return</span> res
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>思路二：<strong>分治法（应掌握）</strong>--算法导论</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
  	<span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
          
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),P={id:"_21-合并两个有序链表",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#_21-合并两个有序链表","aria-hidden":"true"},"#",-1),R={href:"https://leetcode.cn/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},U=p(`<ul><li><p>哑结点 -- while 遍历两个元素</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token comment"># class ListNode:</span>
  <span class="token comment">#     def __init__(self, val=0, next=None):</span>
  <span class="token comment">#         self.val = val</span>
  <span class="token comment">#         self.next = next</span>
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> list1<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> list2<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
          new_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> 	<span class="token comment">## 哑结点</span>
          cur <span class="token operator">=</span> new_head 
          <span class="token keyword">while</span> list1 <span class="token keyword">and</span> list2<span class="token punctuation">:</span>
              <span class="token keyword">if</span> list1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> list2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                  cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> list1
                  list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token builtin">next</span>
              <span class="token keyword">else</span><span class="token punctuation">:</span>
                  cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> list2
                  list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token builtin">next</span>
              cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
          cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> list1 <span class="token keyword">if</span> list1 <span class="token keyword">else</span> list2
          <span class="token keyword">return</span> new_head<span class="token punctuation">.</span><span class="token builtin">next</span>
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),H={id:"_1-两数之和",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#_1-两数之和","aria-hidden":"true"},"#",-1),M={href:"https://leetcode.cn/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"},X=p(`<ul><li><p>hash 表的运用 ----使用哈希记录前序值与对应的索引，检查目标值减去当前值是否存在于前序序列即可</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
          hash_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
          <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">not</span> <span class="token keyword">in</span> hash_map<span class="token punctuation">:</span>
                  hash_map<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i
              <span class="token keyword">else</span><span class="token punctuation">:</span>
                  <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>hash_map<span class="token punctuation">[</span>target <span class="token operator">-</span> num<span class="token punctuation">]</span><span class="token punctuation">]</span>
          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),G={id:"_102-二叉树的层序遍历",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#_102-二叉树的层序遍历","aria-hidden":"true"},"#",-1),Q={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},W=p(`<ul><li><p>BFS -- 队列实现</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token comment"># Definition for a binary tree node.</span>
  <span class="token comment"># class TreeNode:</span>
  <span class="token comment">#     def __init__(self, val=0, left=None, right=None):</span>
  <span class="token comment">#         self.val = val</span>
  <span class="token comment">#         self.left = left</span>
  <span class="token comment">#         self.right = right</span>
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
          <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>
              <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          res<span class="token punctuation">,</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>
          <span class="token keyword">while</span> queue<span class="token punctuation">:</span>
              tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
              res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>val <span class="token keyword">for</span> node <span class="token keyword">in</span> queue<span class="token punctuation">]</span><span class="token punctuation">)</span>
              <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                  node <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
                  <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>
                      tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
                  <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
                      tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
              queue <span class="token operator">=</span> tmp
         	<span class="token keyword">return</span> res
                      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>DFS -- 递归实现（面试常问）</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
          <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">if</span> <span class="token keyword">not</span> node<span class="token punctuation">:</span>
                  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
              <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> level<span class="token punctuation">:</span>
                  res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
              res<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
              dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
              dfs<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
          res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
          <span class="token keyword">return</span> res
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),Y={id:"_33-搜索旋转排序数组",tabindex:"-1"},Z=n("a",{class:"header-anchor",href:"#_33-搜索旋转排序数组","aria-hidden":"true"},"#",-1),$={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array/",target:"_blank",rel:"noopener noreferrer"},nn=p(`<ul><li><p>二分法的变形----旋转后的数组一定有一部分是有序地不论旋转多少次</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
      	left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
          <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
              mid <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">+</span> left
              <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>
                  <span class="token keyword">return</span> mid
              <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>
                  rignt <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
              <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>
                  left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
              <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">:</span>
                  left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
              <span class="token keyword">else</span><span class="token punctuation">:</span>
                  right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
          <span class="token keyword">return</span> left <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),sn={id:"_121-买卖股票的最佳时机",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#_121-买卖股票的最佳时机","aria-hidden":"true"},"#",-1),tn={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/",target:"_blank",rel:"noopener noreferrer"},pn=p(`<ul><li><p>动态规划</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
          cost<span class="token punctuation">,</span> res <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span>
          <span class="token keyword">for</span> price <span class="token keyword">in</span> prices<span class="token punctuation">:</span>
              cost <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>cost<span class="token punctuation">,</span> price<span class="token punctuation">)</span>
              res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> price <span class="token operator">-</span> cost<span class="token punctuation">)</span>
          <span class="token keyword">return</span> res
          
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),en={id:"_141-环形链表",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#_141-环形链表","aria-hidden":"true"},"#",-1),cn={href:"https://leetcode.cn/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},ln=p(`<ul><li><p>快慢指针</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
      	slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> head
        	<span class="token keyword">while</span> fast <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            	slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
            	fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
              	<span class="token keyword">if</span> slow <span class="token operator">==</span> fast<span class="token punctuation">:</span>
                	<span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),un={id:"_200-岛屿数量",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#_200-岛屿数量","aria-hidden":"true"},"#",-1),kn={href:"https://leetcode.cn/problems/number-of-islands/",target:"_blank",rel:"noopener noreferrer"},dn=p(`<ul><li><p>DFS --经典题型</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
          <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;</span> m <span class="token keyword">or</span> <span class="token keyword">not</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
                  <span class="token keyword">return</span> 
              <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">:</span>
                  grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;X&quot;</span>
                  dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
                  dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
                  dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
                  dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
          res <span class="token operator">=</span> <span class="token number">0</span>
          m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                  <span class="token keyword">if</span> grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">:</span>
                      res <span class="token operator">+=</span> <span class="token number">1</span>
                      dfs<span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
          <span class="token keyword">return</span> res            
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),vn={id:"_20-有效的括号",tabindex:"-1"},mn=n("a",{class:"header-anchor",href:"#_20-有效的括号","aria-hidden":"true"},"#",-1),bn={href:"https://leetcode.cn/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"},hn=p(`<ul><li><p>建立一个新的栈，然后遍历字符串的字符，进行比较</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
          my_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
              <span class="token keyword">return</span> <span class="token boolean">False</span>
          <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>
              <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">:</span>
              	my_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span>
         		<span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">:</span>
                  my_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span>
          	<span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">:</span>
                  my_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span>
          	<span class="token keyword">elif</span> <span class="token keyword">not</span> stack <span class="token keyword">or</span> i <span class="token operator">!=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment">### 1.右括号多余 2. 左右括号不匹配</span>
                  <span class="token keyword">return</span> <span class="token boolean">False</span>
              <span class="token keyword">else</span><span class="token punctuation">:</span>
                  my_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
          
          <span class="token keyword">return</span> <span class="token keyword">not</span> my_stack
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),fn={id:"_5-最长回文子串",tabindex:"-1"},yn=n("a",{class:"header-anchor",href:"#_5-最长回文子串","aria-hidden":"true"},"#",-1),_n={href:"https://leetcode.cn/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},wn=p(`<ul><li>暴力 -- 双指针</li><li><u><strong>中心扩散法</strong></u></li><li>动态规划--复杂度较高</li><li>马拉车（？？？）</li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
          n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
          <span class="token keyword">for</span> right <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">for</span> left <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>
                  temp <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">:</span>n <span class="token operator">-</span> right <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
                  <span class="token keyword">if</span> temp <span class="token operator">==</span> temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                      <span class="token keyword">return</span> temp
                  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
          <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">while</span> left <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> right <span class="token operator">&lt;</span> n <span class="token keyword">and</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>
                  left <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span>
                  right <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span>
              <span class="token keyword">return</span> s<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> right<span class="token punctuation">]</span>
          n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
          res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
          <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
              s1 <span class="token operator">=</span> helper<span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
              s2 <span class="token operator">=</span> helper<span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
              <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>
                  res <span class="token operator">=</span> s1
              <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>
                  res <span class="token operator">=</span> s2
          <span class="token keyword">return</span> res
      
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
          n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
          dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
          start<span class="token punctuation">,</span> max_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
          <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
         		dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span>
          <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>
                  <span class="token keyword">if</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>
                      <span class="token keyword">if</span> c <span class="token operator">-</span> r <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>
                          dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
                      <span class="token keyword">else</span><span class="token punctuation">:</span>
                          dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
                  
                  <span class="token keyword">if</span> dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>
                      l <span class="token operator">=</span> c <span class="token operator">-</span> r <span class="token operator">+</span> <span class="token number">1</span>
                      <span class="token keyword">if</span> l <span class="token operator">&gt;</span> max_length<span class="token punctuation">:</span>
                          max_length <span class="token operator">=</span> l
                          start <span class="token operator">=</span> r
          <span class="token keyword">return</span> s<span class="token punctuation">[</span>start<span class="token punctuation">:</span>start <span class="token operator">+</span> max_length<span class="token punctuation">]</span>
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),gn={id:"_88-合并两个有序数组",tabindex:"-1"},xn=n("a",{class:"header-anchor",href:"#_88-合并两个有序数组","aria-hidden":"true"},"#",-1),Ln={href:"https://leetcode.cn/problems/merge-sorted-array/",target:"_blank",rel:"noopener noreferrer"},qn=p(`<ul><li><p>逆向双指针</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
          <span class="token triple-quoted-string string">&quot;&quot;&quot;
          Do not return anything, modify nums1 in-place instead.
          &quot;&quot;&quot;</span>
  
          i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span>
  
          <span class="token keyword">if</span> <span class="token keyword">not</span> n<span class="token punctuation">:</span>
              <span class="token keyword">return</span>
          <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
              <span class="token keyword">if</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                  nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                  j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>
              <span class="token keyword">else</span><span class="token punctuation">:</span>
                  nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                  i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>
              k <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span>
          nums1<span class="token punctuation">[</span><span class="token punctuation">:</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span><span class="token punctuation">:</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),Nn={id:"_236-二叉树的最近公共祖先",tabindex:"-1"},Sn=n("a",{class:"header-anchor",href:"#_236-二叉树的最近公共祖先","aria-hidden":"true"},"#",-1),jn={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"},An=p(`<ul><li><p>递归法</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> <span class="token string">&#39;TreeNode&#39;</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> <span class="token string">&#39;TreeNode&#39;</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token string">&#39;TreeNode&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;TreeNode&#39;</span><span class="token punctuation">:</span>
          <span class="token keyword">if</span> root <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">return</span> root
  
          left <span class="token operator">=</span> self<span class="token punctuation">.</span>lowestCommonAncestor<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>
          right <span class="token operator">=</span> self<span class="token punctuation">.</span>lowestCommonAncestor<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>
  
          <span class="token keyword">if</span> left <span class="token keyword">and</span> right<span class="token punctuation">:</span>
              <span class="token keyword">return</span> root
          <span class="token keyword">return</span> left <span class="token keyword">if</span> left <span class="token keyword">else</span> right
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),Fn={id:"_103-二叉树的锯齿形层序遍历",tabindex:"-1"},Tn=n("a",{class:"header-anchor",href:"#_103-二叉树的锯齿形层序遍历","aria-hidden":"true"},"#",-1),On={href:"https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},Bn=p(`<ul><li><p>层序遍历，与偶数层反转</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
          <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>
              <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>
          res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          flag <span class="token operator">=</span> <span class="token boolean">True</span>
          <span class="token keyword">while</span> queue<span class="token punctuation">:</span>
              temp <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">.</span>val <span class="token keyword">for</span> node <span class="token keyword">in</span> queue<span class="token punctuation">]</span>
              <span class="token keyword">if</span> flag<span class="token punctuation">:</span>
                  res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
              <span class="token keyword">else</span><span class="token punctuation">:</span>
                  res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
              next_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
              <span class="token keyword">for</span> node <span class="token keyword">in</span> queue<span class="token punctuation">:</span>
                  <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>
                      next_queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
                  <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>
                      next_queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
              queue <span class="token operator">=</span>next_queue
              flag <span class="token operator">=</span> <span class="token keyword">not</span> flag
         	<span class="token keyword">return</span> res
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),Cn={id:"_46-全排列",tabindex:"-1"},Vn=n("a",{class:"header-anchor",href:"#_46-全排列","aria-hidden":"true"},"#",-1),zn={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},Dn=p(`<ul><li><p>回溯法</p></li><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
          res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
          visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
          
          <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">:</span>
              <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">:</span>
                  res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                  <span class="token keyword">return</span> 
              <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                  <span class="token keyword">if</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                      arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                      visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                      dfs<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> visited<span class="token punctuation">)</span>
                      visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                      arr<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
          dfs<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>visited<span class="token punctuation">)</span>
          <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),In={id:"_160-相交链表",tabindex:"-1"},Pn=n("a",{class:"header-anchor",href:"#_160-相交链表","aria-hidden":"true"},"#",-1),En={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"},Rn=p(`<ul><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  
  <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
      <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>
          A<span class="token punctuation">,</span> B <span class="token operator">=</span> headA<span class="token punctuation">,</span> headB
          <span class="token keyword">while</span> A<span class="token operator">!=</span> B<span class="token punctuation">:</span>
              A <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> A <span class="token keyword">else</span> headB
              B <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> B <span class="token keyword">else</span> headA
          <span class="token keyword">return</span> A
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),Un={id:"_54-螺旋矩阵",tabindex:"-1"},Hn=n("a",{class:"header-anchor",href:"#_54-螺旋矩阵","aria-hidden":"true"},"#",-1),Kn={href:"https://leetcode.cn/problems/spiral-matrix/",target:"_blank",rel:"noopener noreferrer"},Mn=n("ul",null,[n("li")],-1),Xn={id:"_23-合并k个升序链表",tabindex:"-1"},Gn=n("a",{class:"header-anchor",href:"#_23-合并k个升序链表","aria-hidden":"true"},"#",-1),Jn={href:"https://leetcode.cn/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"};function Qn(Wn,Yn){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("h2",r,[k,s(),n("a",d,[s("206. 反转链表"),t(a)])]),v,n("h2",m,[b,s(),n("a",h,[s("3. 无重复字符的最长子串"),t(a)])]),f,n("h2",y,[_,s(),n("a",w,[s("146. LRU 缓存"),t(a)]),s(" ---- 需要多次练习")]),g,n("h2",x,[L,s(),n("a",q,[s("215. 数组中的第K个最大元素"),t(a)])]),N,n("h2",S,[j,s(),n("a",A,[s("15. 三数之和"),t(a)])]),F,n("h2",T,[O,s(),n("a",B,[s("912. 排序数组"),t(a)])]),n("ul",null,[n("li",null,[s("参考"),n("a",C,[s("排序算法"),t(a)])])]),n("h2",V,[z,s(),n("a",D,[s("53. 最大子数组和"),t(a)])]),I,n("h2",P,[E,s(),n("a",R,[s("21. 合并两个有序链表"),t(a)])]),U,n("h2",H,[K,s(),n("a",M,[s("1. 两数之和"),t(a)])]),X,n("h2",G,[J,s(),n("a",Q,[s("102. 二叉树的层序遍历"),t(a)])]),W,n("h2",Y,[Z,s(),n("a",$,[s("33. 搜索旋转排序数组"),t(a)])]),nn,n("h2",sn,[an,s(),n("a",tn,[s("121. 买卖股票的最佳时机"),t(a)])]),pn,n("h2",en,[on,s(),n("a",cn,[s("141. 环形链表"),t(a)])]),ln,n("h2",un,[rn,s(),n("a",kn,[s("200. 岛屿数量"),t(a)])]),dn,n("h2",vn,[mn,s(),n("a",bn,[s("20. 有效的括号"),t(a)])]),hn,n("h2",fn,[yn,s(),n("a",_n,[s("5. 最长回文子串"),t(a)])]),wn,n("h2",gn,[xn,s(),n("a",Ln,[s("88. 合并两个有序数组"),t(a)])]),qn,n("h2",Nn,[Sn,s(),n("a",jn,[s("236. 二叉树的最近公共祖先"),t(a)])]),An,n("h2",Fn,[Tn,s(),n("a",On,[s("103. 二叉树的锯齿形层序遍历"),t(a)])]),Bn,n("h2",Cn,[Vn,s(),n("a",zn,[s("46. 全排列"),t(a)])]),Dn,n("h2",In,[Pn,s(),n("a",En,[s("160. 相交链表"),t(a)])]),Rn,n("h2",Un,[Hn,s(),n("a",Kn,[s("54. 螺旋矩阵"),t(a)])]),Mn,n("h2",Xn,[Gn,s(),n("a",Jn,[s("23. 合并K个升序链表"),t(a)])])])}const ns=e(i,[["render",Qn],["__file","05.刷题小计.html.vue"]]);export{ns as default};
