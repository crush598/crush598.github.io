const n=JSON.parse('{"key":"v-7447ced2","path":"/demo/05.%E5%88%B7%E9%A2%98%E5%B0%8F%E8%AE%A1.html","title":"刷题小计","lang":"zh-CN","frontmatter":{"title":"刷题小计","date":"2022-09-08T23:01:55.000Z","category":["笔记"],"tag":["LeetCode"]},"headers":[{"level":2,"title":"206. 反转链表","slug":"_206-反转链表","link":"#_206-反转链表","children":[]},{"level":2,"title":"3. 无重复字符的最长子串","slug":"_3-无重复字符的最长子串","link":"#_3-无重复字符的最长子串","children":[]},{"level":2,"title":"146. LRU 缓存 ---- 需要多次练习","slug":"_146-lru-缓存-需要多次练习","link":"#_146-lru-缓存-需要多次练习","children":[]},{"level":2,"title":"215. 数组中的第K个最大元素","slug":"_215-数组中的第k个最大元素","link":"#_215-数组中的第k个最大元素","children":[]},{"level":2,"title":"15. 三数之和","slug":"_15-三数之和","link":"#_15-三数之和","children":[]},{"level":2,"title":"912. 排序数组","slug":"_912-排序数组","link":"#_912-排序数组","children":[]},{"level":2,"title":"53. 最大子数组和","slug":"_53-最大子数组和","link":"#_53-最大子数组和","children":[]},{"level":2,"title":"21. 合并两个有序链表","slug":"_21-合并两个有序链表","link":"#_21-合并两个有序链表","children":[]},{"level":2,"title":"1. 两数之和","slug":"_1-两数之和","link":"#_1-两数之和","children":[]},{"level":2,"title":"102. 二叉树的层序遍历","slug":"_102-二叉树的层序遍历","link":"#_102-二叉树的层序遍历","children":[]},{"level":2,"title":"33. 搜索旋转排序数组","slug":"_33-搜索旋转排序数组","link":"#_33-搜索旋转排序数组","children":[]},{"level":2,"title":"121. 买卖股票的最佳时机","slug":"_121-买卖股票的最佳时机","link":"#_121-买卖股票的最佳时机","children":[]},{"level":2,"title":"141. 环形链表","slug":"_141-环形链表","link":"#_141-环形链表","children":[]},{"level":2,"title":"200. 岛屿数量","slug":"_200-岛屿数量","link":"#_200-岛屿数量","children":[]},{"level":2,"title":"20. 有效的括号","slug":"_20-有效的括号","link":"#_20-有效的括号","children":[]},{"level":2,"title":"5. 最长回文子串","slug":"_5-最长回文子串","link":"#_5-最长回文子串","children":[]},{"level":2,"title":"88. 合并两个有序数组","slug":"_88-合并两个有序数组","link":"#_88-合并两个有序数组","children":[]},{"level":2,"title":"236. 二叉树的最近公共祖先","slug":"_236-二叉树的最近公共祖先","link":"#_236-二叉树的最近公共祖先","children":[]},{"level":2,"title":"103. 二叉树的锯齿形层序遍历","slug":"_103-二叉树的锯齿形层序遍历","link":"#_103-二叉树的锯齿形层序遍历","children":[]},{"level":2,"title":"46. 全排列","slug":"_46-全排列","link":"#_46-全排列","children":[]},{"level":2,"title":"160. 相交链表","slug":"_160-相交链表","link":"#_160-相交链表","children":[]},{"level":2,"title":"54. 螺旋矩阵","slug":"_54-螺旋矩阵","link":"#_54-螺旋矩阵","children":[]},{"level":2,"title":"23. 合并K个升序链表","slug":"_23-合并k个升序链表","link":"#_23-合并k个升序链表","children":[]}],"git":{},"readingTime":{"minutes":7.36,"words":2208},"filePathRelative":"demo/05.刷题小计.md","localizedDate":"2022年9月9日","excerpt":"<h1> 刷题小记</h1>\\n<h2> <a href=\\"https://leetcode.cn/problems/reverse-linked-list/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">206. 反转链表</a></h2>\\n<ul>\\n<li>\\n<p>迭代法（迭代需要三个指针，pre，cur，nxt，分别按顺序指向三个节点）</p>\\n<ul>\\n<li>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code>  <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span><span class=\\"token punctuation\\">:</span>\\n      <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">reverseList</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> head<span class=\\"token punctuation\\">:</span> ListNode<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> ListNode<span class=\\"token punctuation\\">:</span>\\n          pre<span class=\\"token punctuation\\">,</span> cur <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span> head\\n          <span class=\\"token keyword\\">while</span> cur<span class=\\"token punctuation\\">:</span>\\n              nxt <span class=\\"token operator\\">=</span> cur<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span>\\n              cur<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span> <span class=\\"token operator\\">=</span> pre\\n              pre <span class=\\"token operator\\">=</span> cur\\n              cur <span class=\\"token operator\\">=</span> nxt\\n          <span class=\\"token keyword\\">return</span> pre\\n  \\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>递归法</p>\\n<ul>\\n<li>\\n<p>头递归</p>\\n</li>\\n<li>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code>  <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span><span class=\\"token punctuation\\">:</span>\\n      <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">reverseList</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> head<span class=\\"token punctuation\\">:</span> ListNode<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> ListNode<span class=\\"token punctuation\\">:</span>\\n          <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">helper</span><span class=\\"token punctuation\\">(</span>pre<span class=\\"token punctuation\\">,</span> cur<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n              <span class=\\"token keyword\\">if</span> <span class=\\"token keyword\\">not</span> cur<span class=\\"token punctuation\\">:</span>\\n                  <span class=\\"token keyword\\">return</span> pre\\n              tmp <span class=\\"token operator\\">=</span> cur<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span>\\n              cur<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span> <span class=\\"token operator\\">=</span> pre\\n              <span class=\\"token keyword\\">return</span> helper<span class=\\"token punctuation\\">(</span>cur<span class=\\"token punctuation\\">,</span>tmp<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token keyword\\">return</span> helper<span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span> head<span class=\\"token punctuation\\">)</span>\\n  \\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>尾递归</strong></p>\\n</li>\\n<li>\\n<blockquote>\\n<p>递归求解本题理解上有一定的难度，主要需要搞清楚定义的递归函数F(n)的意义。</p>\\n<ul>\\n<li>无序列表本题中F(n)定义为：反转头为n的链表，并返回新的表头，也就是原链表的最后一个节点；</li>\\n<li>无序列表那么F(n.next)的含义为：反转头为n.next的链表，并返回新的表头</li>\\n</ul>\\n<p><u>接下来要想清楚已知F(n.next)的条件下，如何得到F(n)。</u></p>\\n<p><u>注意F(n）和F(n.next）的表头是一致的，所以直接返回就好。关键问题是将n.next指向n，即进行以下操作：</u></p>\\n<p>n.next.next = n</p>\\n<p>n.next = None</p>\\n</blockquote>\\n</li>\\n<li>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code>  <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span><span class=\\"token punctuation\\">:</span>\\n      <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">reverseList</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> head<span class=\\"token punctuation\\">:</span> ListNode<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> ListNode<span class=\\"token punctuation\\">:</span>\\n          <span class=\\"token keyword\\">if</span> <span class=\\"token keyword\\">not</span> head <span class=\\"token keyword\\">or</span> <span class=\\"token keyword\\">not</span> head<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span><span class=\\"token punctuation\\">:</span>\\n              <span class=\\"token keyword\\">return</span> head\\n          new_head <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>reverseList<span class=\\"token punctuation\\">(</span>head<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span><span class=\\"token punctuation\\">)</span>\\n          head<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span> <span class=\\"token operator\\">=</span> head\\n          head<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n          <span class=\\"token keyword\\">return</span> new_head\\n  \\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>","copyright":{"author":"Hush"}}');export{n as data};
