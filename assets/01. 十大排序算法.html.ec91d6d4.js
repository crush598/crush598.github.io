import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as t}from"./app.4624134a.js";const p={},e=t(`<h1 id="排序算法" tabindex="-1"><a class="header-anchor" href="#排序算法" aria-hidden="true">#</a> 排序算法</h1><h2 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h2><p>「冒泡排序法」通过相邻元素之间的比较与交换，使值较小的元素逐步从后面移到前面，值较大的元素从前面移到后面。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>calss Solution<span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 第 i 趟排序</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 从 第 1 个元素到第 len(arr) - 1 - i 个元素开始，相邻两个元素比较</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># 相邻两个元素进行比较，如果前者大于后者，则交换位置</span>
                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    	<span class="token keyword">return</span> arr
    <span class="token keyword">def</span> <span class="token function">sort_array</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>bubble_sort<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序" aria-hidden="true">#</a> 选择排序</h2><p>「选择排序算法」是在每一趟排序中，从未排序部分中选出一个值最小的元素，与未排序部分第 <code>1</code> 个元素交换位置，从而将该元素划分到已排序部分。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>calss Solution<span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 记录未排序部分中最小值的位置</span>
            min_i <span class="token operator">=</span> i
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min_i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    min_i <span class="token operator">=</span> j
            <span class="token comment"># 如果找到最小值的位置，将 i 位置上的元素与最小值位置上的元素进行交换</span>
            <span class="token keyword">if</span> min_i <span class="token operator">!=</span> i<span class="token punctuation">:</span>
                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min_i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min_i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    	<span class="token keyword">return</span> arr
    <span class="token keyword">def</span> <span class="token function">sort_array</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>selection_sort<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序" aria-hidden="true">#</a> 插入排序</h2><p>「插入排序算法」是在每一趟排序中，将无序序列的第 <code>1</code> 个元素，插入到有序序列的适当位置上。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>calss Solution<span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 遍历无序列表</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            j <span class="token operator">=</span> i
            <span class="token comment"># 倒序（从右到左）遍历有序列表</span>
            <span class="token keyword">while</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">:</span>
                <span class="token comment"># 将有序序列中插入位置右侧的元素依次右移一位</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
                j <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token comment"># 将该元素插入到适当的位置</span>
            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp
    	<span class="token keyword">return</span> arr
    <span class="token keyword">def</span> <span class="token function">sort_array</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>insertion_sort<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序" aria-hidden="true">#</a> 希尔排序</h2><p>「希尔排序」就是按照一定的gap值，<strong>不断地对数组进行插入排序</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>calss Solution<span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
        gap <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token comment"># 按照 gap 分组</span>
        <span class="token keyword">while</span> gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment"># 对每组元素进行插入排序</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>gap<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># temp 为每组中无序序列第 1 个元素</span>
                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                j <span class="token operator">=</span> i
                <span class="token comment"># 从右至左遍历每组中的有序序列元素</span>
                <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> gap adn arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">:</span>
                    <span class="token comment"># 将每组有序序列中插入位置右侧的元素依次在组中右移一位</span>
                    arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp
                    j <span class="token operator">=</span> j <span class="token operator">-</span> gap
                <span class="token comment"># 将该元素插入到适当位置</span>
        		arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp
           	<span class="token comment"># 缩小 gap 间隔</span>
        	gap <span class="token operator">=</span> gap <span class="token operator">//</span> <span class="token number">2</span>
    	<span class="token keyword">return</span> arr
    <span class="token keyword">def</span> <span class="token function">sort_array</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>shell_sort<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序" aria-hidden="true">#</a> 归并排序</h2><p>「归并排序」采用经典的分治策略，先递归地将当前序列平均分成两半。然后将有序序列两两合并，最终合并成一个有序序列。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>calss Solution<span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>left_arr<span class="token punctuation">,</span>right_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        left_i<span class="token punctuation">,</span>right_i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>
        <span class="token keyword">while</span> left_i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left_arr<span class="token punctuation">)</span> <span class="token keyword">and</span> right_i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 将两个有序子序列中较小元素依次插入到结果数组中</span>
            <span class="token keyword">if</span> left_arr<span class="token punctuation">[</span>left_i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> right_arr<span class="token punctuation">[</span>right_i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left_arr<span class="token punctuation">[</span>left_i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                left_i <span class="token operator">=</span> left_i <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right_arr<span class="token punctuation">[</span>right_i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                right_i <span class="token operator">=</span> right_i <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left_i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 如果左子序列有剩余元素，则将其插入到结果数组中</span>
            arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left_arr<span class="token punctuation">[</span>left_i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            left_i <span class="token operator">=</span> left_i <span class="token operator">+</span> <span class="token number">1</span>
       	<span class="token keyword">while</span> right_i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right_arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 如果右子序列有剩余元素，则将其插入到结果数组中</span>
            arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right_arr<span class="token punctuation">)</span>
            right_i <span class="token operator">=</span> right_i <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> arr						<span class="token comment"># 返回排好序的结果数组</span>
    <span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 分割过程</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> arr
        mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>     <span class="token comment"># 将数组从中间位置分为左右两个数组</span>
        left_arr <span class="token operator">=</span> self<span class="token punctuation">.</span>merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># 递归将左子序列进行分割和排序</span>
        right_arr <span class="token operator">=</span> self<span class="token punctuation">.</span>merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>		<span class="token comment"># 递归将右子序列进行分割和排序</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left_arr<span class="token punctuation">,</span>right_arr<span class="token punctuation">)</span>		<span class="token comment"># 进行两两合并</span>
        
    <span class="token keyword">def</span> <span class="token function">sort_array</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>merge_sort<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h2><p>「快速排序」通过一趟排序将无序序列分为独立的两个序列，第一个序列的值均比第二个序列的值小。然后递归地排列两个子序列，以达到整个序列有序。</p><ul><li>主要的思想方法就是选一个<strong>基准(pivot)</strong>，比基准数大的数放在<strong>右边</strong>，比基准数小的数放在<strong>左边</strong>。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>calss Solution<span class="token punctuation">:</span>
    <span class="token comment"># 以最低位为基准数，然后将序列中比基准数大的数放在右边，比基准数小的数放在左边。</span>
    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
        i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>
        
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">:</span>
                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
       	arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token comment"># 返回基准数位置</span>
        <span class="token keyword">return</span> i <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            <span class="token comment"># 按照基准数的位置，将序列划分为左右两个子序列</span>
            pi <span class="token operator">=</span> self<span class="token punctuation">.</span>partition<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
            <span class="token comment"># 对左右两个子序列分别进行递归快速排序</span>
            self<span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span> pi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        <span class="token keyword">return</span> arr
        
    	<span class="token keyword">return</span> arr
    <span class="token keyword">def</span> <span class="token function">sort_array</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序" aria-hidden="true">#</a> 堆排序</h2><h2 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序" aria-hidden="true">#</a> 计数排序</h2><h2 id="桶排序" tabindex="-1"><a class="header-anchor" href="#桶排序" aria-hidden="true">#</a> 桶排序</h2><h2 id="基数排序" tabindex="-1"><a class="header-anchor" href="#基数排序" aria-hidden="true">#</a> 基数排序</h2><h2 id="稳定性和复杂度" tabindex="-1"><a class="header-anchor" href="#稳定性和复杂度" aria-hidden="true">#</a> 稳定性和复杂度</h2><ol><li>稳定性</li></ol><ul><li><strong>归并排序</strong>、冒泡排序、插入排序、基数排序是稳定的</li><li>选择排序、快速排序、希尔排序、堆排序是不稳定的</li></ul><ol start="2"><li><p>复杂度</p><table><thead><tr><th>排序法</th><th>平均时间</th><th>最差情形</th><th>稳定度</th><th>额外空间</th><th>备注</th></tr></thead><tbody><tr><td>冒泡</td><td>O(n2)</td><td>O(n2)</td><td>稳定</td><td>O(1)</td><td>n小时较好</td></tr><tr><td>选择</td><td>O(n2)</td><td>O(n2)</td><td>不稳定</td><td>O(1)</td><td>n小时较好</td></tr><tr><td>插入</td><td>O(n2)</td><td>O(n2)</td><td>稳定</td><td>O(1)</td><td>大部分已排序时较好</td></tr><tr><td>基数</td><td>O(logRB)</td><td>O(logRB)</td><td>稳定</td><td>O(n)</td><td>B是真数(0-9)，R是基数(个十百)</td></tr><tr><td>Shell</td><td>O(nlogn)</td><td>O(ns) 1&lt;s&lt;2</td><td>不稳定</td><td>O(1)</td><td>s是所选分组</td></tr><tr><td>快速</td><td>O(nlogn)</td><td>O(n2)</td><td>不稳定</td><td>O(logn)</td><td>n大时较好</td></tr><tr><td>归并</td><td>O(nlogn)</td><td>O(nlogn)</td><td>稳定</td><td>O(n)</td><td>n大时较好</td></tr><tr><td>堆</td><td>O(nlogn)</td><td>O(nlogn)</td><td>不稳定</td><td>O(1)</td><td>n大时较好</td></tr></tbody></table></li></ol><p>参考资料： https://algo.itcharge.cn/01.Array/02.Array-Sort/01.Array-Bubble-Sort/</p>`,29),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","01. 十大排序算法.html.vue"]]);export{k as default};
