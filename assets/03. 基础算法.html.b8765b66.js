import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as n,b as a,e,f as t,r as i}from"./app.f7b1c836.js";const l={},r=t(`<h2 id="递归算法" tabindex="-1"><a class="header-anchor" href="#递归算法" aria-hidden="true">#</a> 递归算法</h2><p>递归算法的伪代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">recursion</span><span class="token punctuation">(</span>大规模问题<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> 递归终止条件<span class="token punctuation">:</span>
        递归终止时的处理方法
    
    <span class="token keyword">return</span> recursion<span class="token punctuation">(</span>小规模问题<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),u={href:"https://algo.itcharge.cn/09.Algorithm-Base/02.Recursive-Algorithm/01.Recursive-Algorithm/",target:"_blank",rel:"noopener noreferrer"},d=t('<h2 id="分治算法" tabindex="-1"><a class="header-anchor" href="#分治算法" aria-hidden="true">#</a> 分治算法</h2><p>使用分治算法解决问题主要分为 <code>3</code> 个步骤：</p><ol><li><strong>分解</strong>：把要解决的问题分解为成若干个规模较小、相对独立、与原问题形式相同的子问题。</li><li><strong>求解</strong>：递归求解各个子问题。</li><li><strong>合并</strong>：按照原问题的要求，将子问题的解逐层合并构成原问题的解。</li></ol>',3),k={href:"https://algo.itcharge.cn/09.Algorithm-Base/03.Divide-And-Conquer-Algorithm/01.Divide-And-Conquer-Algorithm/",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="回溯算法" tabindex="-1"><a class="header-anchor" href="#回溯算法" aria-hidden="true">#</a> 回溯算法</h2><p>回溯算法的基本思想是：<strong>以深度优先搜索的方式，根据产生子节点的条件约束，搜索问题的解。当发现当前节点已不满足求解条件时，就「回溯」返回，尝试其他的路径。</strong></p><p>回溯算法通用模板：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 存放所欲符合条件结果的集合</span>
path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment"># 存放当前符合条件的结果</span>
<span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment"># nums 为选择元素列表</span>
    <span class="token keyword">if</span> 遇到边界条件<span class="token punctuation">:</span>                  <span class="token comment"># 说明找到了一组符合条件的结果</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># 将当前符合条件的结果放入集合中</span>
        <span class="token keyword">return</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 枚举可选元素列表</span>
        path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 选择元素</span>
        backtracking<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>          <span class="token comment"># 递归搜索</span>
        path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 撤销选择</span>

backtracking<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),h={href:"https://algo.itcharge.cn/09.Algorithm-Base/04.Backtracking-Algorithm/01.Backtracking-Algorithm/",target:"_blank",rel:"noopener noreferrer"};function v(g,_){const s=i("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[n("a",u,[a("参考链接"),e(s)])]),d,n("p",null,[n("a",k,[a("参考链接"),e(s)])]),m,n("p",null,[n("a",h,[a("参考链接"),e(s)])])])}const y=o(l,[["render",v],["__file","03. 基础算法.html.vue"]]);export{y as default};
